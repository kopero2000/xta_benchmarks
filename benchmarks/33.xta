 
chan go0,go1,go2; // Process i can start
chan release0;
chan release1; // Machine j can be freed
int[0,2] running0 = 0; // Machine 1 is running process running1. 3 means none
int[0,2] running1 = 0;

int[0,2] round = 0;
// Is process(i) waiting?
// This is redundant information but don't know how to
// simply access processes' locations
bool w0 = 1;
bool w1 = 1;
bool w2 = 1;

clock x0;
// int[0,1] mode0;

clock x1;
// int[0,1] mode1;

clock x2;
// int[0,1] mode2;


process Process0() {
bool Ia0;
bool Ia1;
bool Ia2;
bool Icontrollable_c0;
bool Icontrollable_c1;
bool Icontrollable_c2;
bool Ln15;
bool Lcounter0_out;
bool Lcounter1_out;
bool Lcounter2_out;
bool Lcounter3_out;

state
    on0 { x0 <= 1000 },
    on1 { x0 <= 800 },
    w,
    dead,
    up,
    JustSetIa0,
    JustSetIa1,
    JustSetIa2,
    JustSetIcontrollable_c0,
    JustSetIcontrollable_c1,
    JustSetIcontrollable_c2,
    UpdatedLn15,
    UpdatedLcounter0_out,
    UpdatedLcounter1_out,
    UpdatedLcounter2_out,
    UpdatedLcounter3_out;
commit
    up,
    JustSetIa0,
    JustSetIa1,
    JustSetIa2,
    JustSetIcontrollable_c0,
    JustSetIcontrollable_c1,
    JustSetIcontrollable_c2,
    UpdatedLn15,
    UpdatedLcounter0_out,
    UpdatedLcounter1_out,
    UpdatedLcounter2_out,
    UpdatedLcounter3_out;
init
    w;
trans
    w -> on0 { guard Lcounter0_out == 0; sync go0?; assign x0:=0, w0:=0; },
    w -> dead { guard Lcounter0_out == 0 && x0 > 2000; },
    on0 -> up { guard Lcounter0_out == 0 && x0 >= 500 && x0 <= 1000; assign x0:=0; },
    w -> on1 { guard Lcounter0_out == 1; sync go0?; assign x0:=0, w0:=0; },
    w -> dead { guard Lcounter0_out == 1 && x0 > 2200; },
    on1 -> up { guard Lcounter0_out == 1 && x0 >= 400 && x0 <= 800; assign x0:=0; },
    up -> JustSetIa0 { assign Ia0 := 0; },
    up -> JustSetIa0 { assign Ia0 := 1; },
    JustSetIa0 -> JustSetIa1 { assign Ia1 := 0; },
    JustSetIa0 -> JustSetIa1 { assign Ia1 := 1; },
    JustSetIa1 -> JustSetIa2 { assign Ia2 := 0; },
    JustSetIa1 -> JustSetIa2 { assign Ia2 := 1; },
    JustSetIa2 -> JustSetIcontrollable_c0 { assign Icontrollable_c0 := 0; },
    JustSetIa2 -> JustSetIcontrollable_c0 { assign Icontrollable_c0 := 1; },
    JustSetIcontrollable_c0 -> JustSetIcontrollable_c1 { assign Icontrollable_c1 := 0; },
    JustSetIcontrollable_c0 -> JustSetIcontrollable_c1 { assign Icontrollable_c1 := 1; },
    JustSetIcontrollable_c1 -> JustSetIcontrollable_c2 { assign Icontrollable_c2 := 0; },
    JustSetIcontrollable_c1 -> JustSetIcontrollable_c2 { assign Icontrollable_c2 := 1; },
    JustSetIcontrollable_c2 -> UpdatedLn15 { assign Ln15 := 1; },
    UpdatedLn15 -> UpdatedLcounter0_out { assign Lcounter0_out := !(!((!(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15))) && (Ia0)) && !((Lcounter0_out) && (Ln15))) && !(!(!(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15))) && (Ia0)) && ((Lcounter0_out) && (Ln15)))); },
    UpdatedLcounter0_out -> UpdatedLcounter1_out { assign Lcounter1_out := (!(((!(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1)) && !((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && ((Lcounter1_out) && (Ln15))) && !(!((!(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1)) && !((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && !((Lcounter1_out) && (Ln15)))); },
    UpdatedLcounter1_out -> UpdatedLcounter2_out { assign Lcounter2_out := (!(((!(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2)) && !((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && ((Lcounter2_out) && (Ln15))) && !(!((!(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2)) && !((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && !((Lcounter2_out) && (Ln15)))); },
    UpdatedLcounter2_out -> UpdatedLcounter3_out { assign Lcounter3_out := (!(!(!(!(!((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2)) && !((Lcounter2_out) && (Ln15))) && !(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2))) && ((Lcounter3_out) && (Ln15))) && !((!(!((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2)) && !((Lcounter2_out) && (Ln15))) && !(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2))) && !((Lcounter3_out) && (Ln15)))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))); },
    UpdatedLcounter3_out -> w { guard running0 == 0; sync release0!; assign w0:=1; },
    UpdatedLcounter3_out -> w { guard running1 == 0; sync release1!; assign w0:=1; };
}

process Process1() {
bool Ia0;
bool Ia1;
bool Ia2;
bool Icontrollable_c0;
bool Icontrollable_c1;
bool Icontrollable_c2;
bool Ln15;
bool Lcounter0_out;
bool Lcounter1_out;
bool Lcounter2_out;
bool Lcounter3_out;

state
    on0 { x1 <= 1000 },
    on1 { x1 <= 800 },
    w,
    dead,
    up,
    JustSetIa0,
    JustSetIa1,
    JustSetIa2,
    JustSetIcontrollable_c0,
    JustSetIcontrollable_c1,
    JustSetIcontrollable_c2,
    UpdatedLn15,
    UpdatedLcounter0_out,
    UpdatedLcounter1_out,
    UpdatedLcounter2_out,
    UpdatedLcounter3_out;
commit
    up,
    JustSetIa0,
    JustSetIa1,
    JustSetIa2,
    JustSetIcontrollable_c0,
    JustSetIcontrollable_c1,
    JustSetIcontrollable_c2,
    UpdatedLn15,
    UpdatedLcounter0_out,
    UpdatedLcounter1_out,
    UpdatedLcounter2_out,
    UpdatedLcounter3_out;
init
    w;
trans
    w -> on0 { guard Lcounter0_out == 0; sync go1?; assign x1:=0, w1:=0; },
    w -> dead { guard Lcounter0_out == 0 && x1 > 2000; },
    on0 -> up { guard Lcounter0_out == 0 && x1 >= 500 && x1 <= 1000; assign x1:=0; },
    w -> on1 { guard Lcounter0_out == 1; sync go1?; assign x1:=0, w1:=0; },
    w -> dead { guard Lcounter0_out == 1 && x1 > 2200; },
    on1 -> up { guard Lcounter0_out == 1 && x1 >= 400 && x1 <= 800; assign x1:=0; },
    up -> JustSetIa0 { assign Ia0 := 0; },
    up -> JustSetIa0 { assign Ia0 := 1; },
    JustSetIa0 -> JustSetIa1 { assign Ia1 := 0; },
    JustSetIa0 -> JustSetIa1 { assign Ia1 := 1; },
    JustSetIa1 -> JustSetIa2 { assign Ia2 := 0; },
    JustSetIa1 -> JustSetIa2 { assign Ia2 := 1; },
    JustSetIa2 -> JustSetIcontrollable_c0 { assign Icontrollable_c0 := 0; },
    JustSetIa2 -> JustSetIcontrollable_c0 { assign Icontrollable_c0 := 1; },
    JustSetIcontrollable_c0 -> JustSetIcontrollable_c1 { assign Icontrollable_c1 := 0; },
    JustSetIcontrollable_c0 -> JustSetIcontrollable_c1 { assign Icontrollable_c1 := 1; },
    JustSetIcontrollable_c1 -> JustSetIcontrollable_c2 { assign Icontrollable_c2 := 0; },
    JustSetIcontrollable_c1 -> JustSetIcontrollable_c2 { assign Icontrollable_c2 := 1; },
    JustSetIcontrollable_c2 -> UpdatedLn15 { assign Ln15 := 1; },
    UpdatedLn15 -> UpdatedLcounter0_out { assign Lcounter0_out := !(!((!(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15))) && (Ia0)) && !((Lcounter0_out) && (Ln15))) && !(!(!(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15))) && (Ia0)) && ((Lcounter0_out) && (Ln15)))); },
    UpdatedLcounter0_out -> UpdatedLcounter1_out { assign Lcounter1_out := (!(((!(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1)) && !((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && ((Lcounter1_out) && (Ln15))) && !(!((!(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1)) && !((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && !((Lcounter1_out) && (Ln15)))); },
    UpdatedLcounter1_out -> UpdatedLcounter2_out { assign Lcounter2_out := (!(((!(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2)) && !((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && ((Lcounter2_out) && (Ln15))) && !(!((!(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2)) && !((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))) && !((Lcounter2_out) && (Ln15)))); },
    UpdatedLcounter2_out -> UpdatedLcounter3_out { assign Lcounter3_out := (!(!(!(!(!((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2)) && !((Lcounter2_out) && (Ln15))) && !(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2))) && ((Lcounter3_out) && (Ln15))) && !((!(!((!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && (Ia2)) && !((Lcounter2_out) && (Ln15))) && !(!(!(!((((Lcounter0_out) && (Ln15)) && (Ia0)) && (Ia1)) && !((Lcounter1_out) && (Ln15))) && !(!(((Lcounter0_out) && (Ln15)) && (Ia0)) && !(Ia1))) && !(Ia2))) && !((Lcounter3_out) && (Ln15)))) && !(!(!(!(!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && !(Icontrollable_c2)) && !((!(!(Icontrollable_c1) && (Icontrollable_c0)) && !((Icontrollable_c1) && !(Icontrollable_c0))) && (Icontrollable_c2))) && ((Lcounter3_out) && (Ln15)))); },
    UpdatedLcounter3_out -> w { guard running0 == 1; sync release0!; assign w1:=1; },
    UpdatedLcounter3_out -> w { guard running1 == 1; sync release1!; assign w1:=1; };
}

process Process2() {
bool Ia_0_;
bool Ia_1_;
bool Ib_0_;
bool Ib_1_;
bool Icontrollable_c_0_;
bool Icontrollable_c_1_;
bool Lstate_n15;
bool Lerr_out;

state
    on0 { x2 <= 1000 },
    on1 { x2 <= 800 },
    w,
    dead,
    up,
    JustSetIa_0_,
    JustSetIa_1_,
    JustSetIb_0_,
    JustSetIb_1_,
    JustSetIcontrollable_c_0_,
    JustSetIcontrollable_c_1_,
    UpdatedLstate_n15,
    UpdatedLerr_out;
commit
    up,
    JustSetIa_0_,
    JustSetIa_1_,
    JustSetIb_0_,
    JustSetIb_1_,
    JustSetIcontrollable_c_0_,
    JustSetIcontrollable_c_1_,
    UpdatedLstate_n15,
    UpdatedLerr_out;
init
    w;
trans
    w -> on0 { guard Lstate_n15 == 0; sync go2?; assign x2:=0, w2:=0; },
    w -> dead { guard Lstate_n15 == 0 && x2 > 2000; },
    on0 -> up { guard Lstate_n15 == 0 && x2 >= 500 && x2 <= 1000; assign x2:=0; },
    w -> on1 { guard Lstate_n15 == 1; sync go2?; assign x2:=0, w2:=0; },
    w -> dead { guard Lstate_n15 == 1 && x2 > 2200; },
    on1 -> up { guard Lstate_n15 == 1 && x2 >= 400 && x2 <= 800; assign x2:=0; },
    up -> JustSetIa_0_ { assign Ia_0_ := 0; },
    up -> JustSetIa_0_ { assign Ia_0_ := 1; },
    JustSetIa_0_ -> JustSetIa_1_ { assign Ia_1_ := 0; },
    JustSetIa_0_ -> JustSetIa_1_ { assign Ia_1_ := 1; },
    JustSetIa_1_ -> JustSetIb_0_ { assign Ib_0_ := 0; },
    JustSetIa_1_ -> JustSetIb_0_ { assign Ib_0_ := 1; },
    JustSetIb_0_ -> JustSetIb_1_ { assign Ib_1_ := 0; },
    JustSetIb_0_ -> JustSetIb_1_ { assign Ib_1_ := 1; },
    JustSetIb_1_ -> JustSetIcontrollable_c_0_ { assign Icontrollable_c_0_ := 0; },
    JustSetIb_1_ -> JustSetIcontrollable_c_0_ { assign Icontrollable_c_0_ := 1; },
    JustSetIcontrollable_c_0_ -> JustSetIcontrollable_c_1_ { assign Icontrollable_c_1_ := 0; },
    JustSetIcontrollable_c_0_ -> JustSetIcontrollable_c_1_ { assign Icontrollable_c_1_ := 1; },
    JustSetIcontrollable_c_1_ -> UpdatedLstate_n15 { assign Lstate_n15 := 1; },
    UpdatedLstate_n15 -> UpdatedLerr_out { assign Lerr_out := !((!((!(!(!(!(Ib_1_) && (Ia_1_)) && !((Ib_1_) && !(Ia_1_))) && !((Ib_0_) && (Ia_0_))) && !((!(!(Ib_1_) && (Ia_1_)) && !((Ib_1_) && !(Ia_1_))) && ((Ib_0_) && (Ia_0_)))) && (Icontrollable_c_1_)) && !(!(!(!(!(!(Ib_1_) && (Ia_1_)) && !((Ib_1_) && !(Ia_1_))) && !((Ib_0_) && (Ia_0_))) && !((!(!(Ib_1_) && (Ia_1_)) && !((Ib_1_) && !(Ia_1_))) && ((Ib_0_) && (Ia_0_)))) && !(Icontrollable_c_1_))) && (!(!(!(!(Ib_0_) && !(Ia_0_)) && !((Ib_0_) && (Ia_0_))) && (Icontrollable_c_0_)) && !((!(!(Ib_0_) && !(Ia_0_)) && !((Ib_0_) && (Ia_0_))) && !(Icontrollable_c_0_)))); },
    UpdatedLerr_out -> w { guard running0 == 2; sync release0!; assign w2:=1; },
    UpdatedLerr_out -> w { guard running1 == 2; sync release1!; assign w2:=1; };
}

process Machine0() {

state
    busy,
    idle;
commit
    idle;
init
    idle;
trans
    busy -> idle { sync release0?; assign running0 := 2; },
    idle -> busy { guard round == 0 && w0 == 1; sync go0!; assign round = 1,  running0 := 0; },
    idle -> idle { guard round == 0 && w0 == 0; assign round = 1; },
    idle -> busy { guard round == 1 && w1 == 1; sync go1!; assign round = 2,  running0 := 1; },
    idle -> idle { guard round == 1 && w1 == 0; assign round = 2; },
    idle -> busy { guard round == 2 && w2 == 1; sync go2!; assign round = 0,  running0 := 2; },
    idle -> idle { guard round == 2 && w2 == 0; assign round = 0; };
}

process Machine1() {

state
    busy,
    idle;
commit
    idle;
init
    idle;
trans
    busy -> idle { sync release1?; assign running1 := 2; },
    idle -> busy { guard round == 0 && w0 == 1; sync go0!; assign round = 1,  running1 := 0; },
    idle -> idle { guard round == 0 && w0 == 0; assign round = 1; },
    idle -> busy { guard round == 1 && w1 == 1; sync go1!; assign round = 2,  running1 := 1; },
    idle -> idle { guard round == 1 && w1 == 0; assign round = 2; },
    idle -> busy { guard round == 2 && w2 == 1; sync go2!; assign round = 0,  running1 := 2; },
    idle -> idle { guard round == 2 && w2 == 0; assign round = 0; };
}

system Process0, Process1, Process2, Machine0, Machine1;
prop{
    E<> Process0_dead || Process1_dead ||Process2_dead 
}